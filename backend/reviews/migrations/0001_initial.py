# Generated by Django 5.0.14 on 2025-06-08 04:00

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.CharField(max_length=255, verbose_name='ID del objeto')),
                ('title', models.CharField(help_text='Título descriptivo de la reseña (mínimo 5 caracteres)', max_length=200, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='Título')),
                ('content', models.TextField(help_text='Contenido de la reseña (10-2000 caracteres)', validators=[django.core.validators.MinLengthValidator(10, 'El contenido debe tener al menos 10 caracteres'), django.core.validators.MaxLengthValidator(2000, 'El contenido no puede exceder 2000 caracteres')], verbose_name='Contenido')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Muy malo'), (2, '2 - Malo'), (3, '3 - Regular'), (4, '4 - Bueno'), (5, '5 - Excelente')], help_text='Calificación de 1 a 5 estrellas', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Calificación')),
                ('status', models.CharField(choices=[('draft', 'Borrador'), ('published', 'Publicado'), ('moderated', 'En moderación'), ('approved', 'Aprobado'), ('rejected', 'Rechazado'), ('hidden', 'Oculto')], default='published', max_length=20, verbose_name='Estado')),
                ('is_verified_purchase', models.BooleanField(default=False, help_text='Indica si el usuario realmente adquirió el producto/servicio', verbose_name='Compra verificada')),
                ('is_helpful_count', models.PositiveIntegerField(default=0, verbose_name='Votos útiles')),
                ('is_reported', models.BooleanField(default=False, help_text='Indica si la reseña ha sido reportada por otros usuarios', verbose_name='Reportado')),
                ('report_count', models.PositiveIntegerField(default=0, verbose_name='Número de reportes')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dirección IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('moderated_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de moderación')),
                ('moderation_notes', models.TextField(blank=True, verbose_name='Notas de moderación')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Tipo de contenido')),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_reviews', to=settings.AUTH_USER_MODEL, verbose_name='Moderado por')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Reseña',
                'verbose_name_plural': 'Reseñas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpful',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_votes', to='reviews.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='helpful_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Voto útil',
                'verbose_name_plural': 'Votos útiles',
            },
        ),
        migrations.CreateModel(
            name='ReviewMedia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to='reviews/media/%Y/%m/', verbose_name='Archivo')),
                ('media_type', models.CharField(choices=[('image', 'Imagen'), ('video', 'Video'), ('document', 'Documento')], max_length=20, verbose_name='Tipo de archivo')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='Descripción')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='reviews.review')),
            ],
            options={
                'verbose_name': 'Archivo de reseña',
                'verbose_name_plural': 'Archivos de reseñas',
                'ordering': ['sort_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Contenido inapropiado'), ('fake', 'Reseña falsa'), ('offensive', 'Lenguaje ofensivo'), ('irrelevant', 'No relevante'), ('other', 'Otro')], max_length=20, verbose_name='Razón del reporte')),
                ('description', models.TextField(blank=True, verbose_name='Descripción adicional')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Resuelto')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de resolución')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Notas de resolución')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_reports', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_reports', to=settings.AUTH_USER_MODEL, verbose_name='Resuelto por')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='reviews.review')),
            ],
            options={
                'verbose_name': 'Reporte de reseña',
                'verbose_name_plural': 'Reportes de reseñas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['content_type', 'object_id'], name='reviews_rev_content_627d80_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['user'], name='reviews_rev_user_id_a65d48_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='reviews_rev_rating_2db6dd_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['status'], name='reviews_rev_status_5966f7_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='reviews_rev_created_bdcc91_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified_purchase'], name='reviews_rev_is_veri_544d90_idx'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('user', 'content_type', 'object_id'), name='unique_user_review_per_object'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewhelpful',
            unique_together={('review', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='reviewreport',
            unique_together={('review', 'reporter')},
        ),
    ]
