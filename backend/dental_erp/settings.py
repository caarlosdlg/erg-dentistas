"""
Django settings for dental_erp project.

Generated by 'django-admin startproject' using Django 5.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv(Path(__file__).resolve().parent.parent / '.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-#)*@iop%!&-rz+858!0%n3ryzo!l1ct65w_de+7y_t(z9wtxi%')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', 'testserver', 'dental_erp-web-1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # Necesario para el blacklist de tokens
    'corsheaders',
    'mptt',
    'django_filters',
    'compressor',  # Django Compressor para optimización de CSS/JS
    
    # Apps del ERP Dental
    'authentication',  # Nueva app de autenticación
    'dentistas',
    'pacientes',
    'citas',
    'usuarios',
    'tratamientos',
    'facturacion',
    'categorias',
    'reviews',
    'imagenes',
    'inventario',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise debe ir después de SecurityMiddleware y antes de todo lo demás
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # Middleware para caché - se agrega para procesar las respuestas
    'django.middleware.gzip.GZipMiddleware',  # Compresión para reducir tamaño de respuestas
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Middleware para CORS
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Middleware personalizado para encabezados de archivos estáticos en producción
    'dental_erp.middleware.StaticFilesHeadersMiddleware',
    # Middleware para minificar HTML en producción
    'dental_erp.html_middleware.HTMLMinifyMiddleware',
]

ROOT_URLCONF = 'dental_erp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Procesador personalizado para variables estáticas
                'dental_erp.context_processors.static_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'dental_erp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Use SQLite for local development and testing when PostgreSQL is not available
import sys
if 'test' in sys.argv or config('USE_SQLITE', default=False, cast=bool):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('POSTGRES_DB', default='dental_erp_db'),
            'USER': config('POSTGRES_USER', default='dental_erp_user'),
            'PASSWORD': config('POSTGRES_PASSWORD', default='dental_erp_password123'),
            'HOST': config('DB_HOST', default='localhost'),
            'PORT': config('DB_PORT', default='5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-mx'

TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# STATIC_URL se define más abajo en la sección de configuración de archivos estáticos

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuraciones adicionales para el ERP Dental

# Configuración para archivos media (imágenes, documentos)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuración para desarrollo
if DEBUG:
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1', '0.0.0.0'])

# Configuración de CORS para desarrollo (se agregará cuando se instale django-cors-headers)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React development server (default)
    "http://127.0.0.1:3000",
    "http://localhost:5173",  # Vite development server (current)
    "http://127.0.0.1:5173",
    "http://localhost:5174",  # Vite development server (alternate)
    "http://127.0.0.1:5174",
    "http://localhost:5175",  # Vite development server (alternate)
    "http://127.0.0.1:5175",
]

# Permitir credenciales en solicitudes CORS
CORS_ALLOW_CREDENTIALS = True

# Configuración de archivos estáticos
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Configuración avanzada de archivos estáticos
# Configuración de finders - incluye el buscador de compressor
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# Versión de archivos estáticos para cache busting manual
import uuid
STATIC_VERSION = str(uuid.uuid4())[:8]

# Configuración diferente para desarrollo vs producción
if not DEBUG:
    # Determinar el almacenamiento a utilizar según la configuración
    USE_CUSTOM_STORAGE = config('USE_CUSTOM_STORAGE', default=True, cast=bool)
    
    if USE_CUSTOM_STORAGE:
        # Usar nuestro almacenamiento optimizado personalizado
        STATICFILES_STORAGE = 'dental_erp.storage_extensions.OptimizedManifestStaticFilesStorage'
    else:
        # Usar WhiteNoise para servir archivos estáticos versionados en producción
        STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # Habilitar almacenamiento en memoria caché de archivos estáticos para optimizar rendimiento
    WHITENOISE_USE_FINDERS = False
    
    # Configuración para subresource integrity (SRI)
    # Requiere WhiteNoise >= 5.0
    WHITENOISE_ADD_HEADERS_FUNCTION = 'dental_erp.cache_settings.get_cache_headers'
    
    # Tiempo de caché para archivos estáticos (1 año)
    STATIC_FILES_CACHE_TIMEOUT = 31536000
    
    # Configuraciones de WhiteNoise para producción
    WHITENOISE_MIDDLEWARE = {
        'max_age': 60 * 60 * 24 * 365,  # 1 año en segundos
        'allow_all_origins': False,
        'add_headers_function': None,
    }
    
    # Configuración de compresión para WhiteNoise
    WHITENOISE_COMPRESS_LEVEL = 9  # Nivel máximo de compresión gzip (1-9)
    WHITENOISE_BROTLI = True       # Habilitar compresión Brotli (más eficiente que gzip)
    
    # Configuración de cache-control para archivos estáticos
    WHITENOISE_MAX_AGE = 60 * 60 * 24 * 365  # 1 año en segundos
    
    # Configuración para no servir archivos estáticos no encontrados
    WHITENOISE_SKIP_MISSING_FILES = False
else:
    # Configuración para desarrollo - más simple
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Configuración de Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

# JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JSON_ENCODER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(hours=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

# Google OAuth Configuration
GOOGLE_OAUTH2_CLIENT_ID = config('GOOGLE_OAUTH2_CLIENT_ID', default='')
GOOGLE_OAUTH2_CLIENT_SECRET = config('GOOGLE_OAUTH2_CLIENT_SECRET', default='')

# GitHub OAuth Configuration
GITHUB_CLIENT_ID = config('GITHUB_CLIENT_ID', default='Ov23liJNJLbSggKfbHCe')
GITHUB_CLIENT_SECRET = config('GITHUB_CLIENT_SECRET', default='4c2904eacd97b3499a645b1ed3a39b8d99f1d9a8')

# Custom User Model
# AUTH_USER_MODEL = 'authentication.CustomUser'  # Comentado temporalmente

# Email Configuration
# ===================

# Email Backend Configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')

# SMTP Configuration (for production)
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=False, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')

# Default From Email
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@dentalerp.com')
SERVER_EMAIL = config('SERVER_EMAIL', default='server@dentalerp.com')

# Email Templates Configuration
EMAIL_TIMEOUT = config('EMAIL_TIMEOUT', default=30, cast=int)
EMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX', default='[Dental ERP] ')

# Email Feature Flags
SEND_REVIEW_NOTIFICATIONS = config('SEND_REVIEW_NOTIFICATIONS', default=True, cast=bool)
SEND_MODERATION_NOTIFICATIONS = config('SEND_MODERATION_NOTIFICATIONS', default=True, cast=bool)
SEND_HELPFUL_NOTIFICATIONS = config('SEND_HELPFUL_NOTIFICATIONS', default=False, cast=bool)

# Notification Email Settings
ADMIN_EMAIL = config('ADMIN_EMAIL', default='admin@dentalerp.com')
NOTIFICATION_EMAIL_FROM = config('NOTIFICATION_EMAIL_FROM', default='notifications@dentalerp.com')

# Configuración de django-compressor para minimizar CSS y JS
COMPRESS_ENABLED = not DEBUG
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',
]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',
]
COMPRESS_OUTPUT_DIR = 'compressed'
COMPRESS_STORAGE = STATICFILES_STORAGE
COMPRESS_OFFLINE = not DEBUG
COMPRESS_OFFLINE_CONTEXT = {
    'STATIC_URL': STATIC_URL,
    'MEDIA_URL': MEDIA_URL,
}

# Configuración del sistema de caché
# En desarrollo usamos caché en memoria, en producción recomendamos Redis o Memcached
if DEBUG:
    # Caché en memoria para desarrollo
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'dental-erp-cache',
        }
    }
else:
    # Caché para producción - usar Redis si está disponible, sino archivo
    REDIS_URL = config('REDIS_URL', default=None)
    
    if REDIS_URL:
        # Configuración para Redis
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.redis.RedisCache',
                'LOCATION': REDIS_URL,
                'OPTIONS': {
                    'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                    'IGNORE_EXCEPTIONS': True,
                }
            }
        }
    else:
        # Caché basada en archivos como fallback
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
                'LOCATION': os.path.join(BASE_DIR, 'django_cache'),
                'TIMEOUT': 60 * 60 * 24,  # 24 horas
                'OPTIONS': {
                    'MAX_ENTRIES': 1000
                }
            }
        }

# Configuraciones de caché para diferentes partes del sistema
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # 15 minutos por defecto
CACHE_MIDDLEWARE_KEY_PREFIX = 'dental_erp'

# Configuración de almacenamiento en la nube (AWS S3)
# Estas configuraciones solo se aplican en producción
if not DEBUG:
    USE_S3 = config('USE_S3', cast=bool, default=False)
    
    if USE_S3:
        # Configuración AWS S3
        AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default='')
        AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default='')
        AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='dental-erp-files')
        AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='us-east-1')
        AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN', 
                                      default=f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com')
        
        # Configuración de ubicación de archivos
        STATICFILES_LOCATION = 'static'
        MEDIAFILES_LOCATION = 'media'
        
        # Configuración de storages
        DEFAULT_FILE_STORAGE = 'dental_erp.storage_backends.MediaFileStorage'
        STATICFILES_STORAGE = 'dental_erp.storage_backends.StaticFileStorage'
        
        # Configuración de caché para S3
        AWS_S3_OBJECT_PARAMETERS = {
            'CacheControl': 'max-age=86400',  # 1 día para archivos media
        }
        
        # Para archivos estáticos, caché más agresivo
        AWS_STATIC_OBJECT_PARAMETERS = {
            'CacheControl': 'max-age=31536000',  # 1 año para archivos estáticos
        }
        
        # Seguridad S3
        AWS_DEFAULT_ACL = 'public-read'
        AWS_QUERYSTRING_AUTH = False  # No usar autenticación en URLs
        
        # Configuración de CDN si está habilitado
        USE_CDN = config('USE_CDN', cast=bool, default=False)
        if USE_CDN:
            CDN_DOMAIN = config('CDN_DOMAIN', default='')
            if CDN_DOMAIN:
                # Usa el dominio CDN para servir archivos estáticos
                STATIC_URL = f'https://{CDN_DOMAIN}/{STATICFILES_LOCATION}/'
                MEDIA_URL = f'https://{CDN_DOMAIN}/{MEDIAFILES_LOCATION}/'
        else:
            # Usa el dominio S3 directamente
            STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
            MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'
