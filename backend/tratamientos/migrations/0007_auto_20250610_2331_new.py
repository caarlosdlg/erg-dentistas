# Generated by Django 5.0.14 on 2025-06-11 05:31

import django.db.models.deletion
import mptt.fields
import uuid
from django.db import migrations, models
from django.utils import timezone


def convert_to_mptt(apps, schema_editor):
    """Convertir categorías existentes a estructura MPTT"""
    CategoriaTratamiento = apps.get_model('tratamientos', 'CategoriaTratamiento')
    
    # Todas las categorías existentes serán categorías raíz (level=0)
    for categoria in CategoriaTratamiento.objects.all():
        categoria.level = 0
        categoria.lft = 1
        categoria.rght = 2
        categoria.tree_id = categoria.pk
        if not hasattr(categoria, 'fecha_creacion') or not categoria.fecha_creacion:
            categoria.fecha_creacion = timezone.now()
        categoria.save()


def reverse_mptt(apps, schema_editor):
    """Reversar la conversión MPTT"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('tratamientos', '0006_alter_atributocategoriatratamiento_unique_together_and_more'),
    ]

    operations = [
        # Agregar campos MPTT y otros campos nuevos
        migrations.AddField(
            model_name='categoriatratamiento',
            name='level',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='lft',
            field=models.PositiveIntegerField(default=1, editable=False),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='rght',
            field=models.PositiveIntegerField(default=2, editable=False),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='tree_id',
            field=models.PositiveIntegerField(default=1, editable=False),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, help_text='Categoría padre en la jerarquía', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tratamientos.categoriatratamiento', verbose_name='Categoría padre'),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='slug',
            field=models.SlugField(blank=True, help_text='URL amigable generada automáticamente', max_length=100, unique=True, verbose_name='URL amigable'),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='icono',
            field=models.CharField(blank=True, help_text='Icono representativo (emoji o clase CSS)', max_length=50, verbose_name='Icono'),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='imagen',
            field=models.ImageField(blank=True, help_text='Imagen representativa de la categoría', null=True, upload_to='categorias_tratamientos/', verbose_name='Imagen'),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='orden',
            field=models.PositiveIntegerField(default=0, help_text='Orden de visualización dentro del mismo nivel', verbose_name='Orden'),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='meta_titulo',
            field=models.CharField(blank=True, help_text='Título para SEO', max_length=200, verbose_name='Meta título'),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='meta_descripcion',
            field=models.TextField(blank=True, help_text='Descripción para SEO', verbose_name='Meta descripción'),
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='fecha_creacion',
            field=models.DateTimeField(auto_now_add=True, default=timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='categoriatratamiento',
            name='fecha_actualizacion',
            field=models.DateTimeField(auto_now=True),
        ),
        
        # Agregar campos a Tratamiento
        migrations.AddField(
            model_name='tratamiento',
            name='popular',
            field=models.BooleanField(default=False, help_text='Marca tratamientos populares para destacar', verbose_name='Popular'),
        ),
        migrations.AddField(
            model_name='tratamiento',
            name='orden_visualizacion',
            field=models.PositiveIntegerField(default=0, help_text='Orden en que aparece en listados', verbose_name='Orden de visualización'),
        ),
        
        # Ejecutar la conversión de datos
        migrations.RunPython(convert_to_mptt, reverse_mptt),
        
        # Actualizar opciones del modelo
        migrations.AlterModelOptions(
            name='categoriatratamiento',
            options={'ordering': ['tree_id', 'lft'], 'verbose_name': 'Categoría de Tratamiento', 'verbose_name_plural': 'Categorías de Tratamientos'},
        ),
        migrations.AlterModelOptions(
            name='tratamiento',
            options={'ordering': ['categoria__tree_id', 'categoria__lft', 'orden_visualizacion', 'nombre'], 'verbose_name': 'Tratamiento', 'verbose_name_plural': 'Tratamientos'},
        ),
        
        # Actualizar campos existentes con verbose_name y help_text mejorados
        migrations.AlterField(
            model_name='categoriatratamiento',
            name='activo',
            field=models.BooleanField(default=True, help_text='Indica si la categoría está activa', verbose_name='Activa'),
        ),
        migrations.AlterField(
            model_name='categoriatratamiento',
            name='color',
            field=models.CharField(default='#007bff', help_text='Color en formato hexadecimal', max_length=7, verbose_name='Color'),
        ),
        migrations.AlterField(
            model_name='categoriatratamiento',
            name='descripcion',
            field=models.TextField(blank=True, help_text='Descripción detallada de la categoría', verbose_name='Descripción'),
        ),
        migrations.AlterField(
            model_name='categoriatratamiento',
            name='nombre',
            field=models.CharField(help_text='Nombre descriptivo de la categoría', max_length=100, verbose_name='Nombre de la categoría'),
        ),
        
        # Crear índices
        migrations.AddIndex(
            model_name='categoriatratamiento',
            index=models.Index(fields=['activo'], name='tratamiento_activo_db81a4_idx'),
        ),
        migrations.AddIndex(
            model_name='categoriatratamiento',
            index=models.Index(fields=['parent'], name='tratamiento_parent__8f9e32_idx'),
        ),
        migrations.AddIndex(
            model_name='categoriatratamiento',
            index=models.Index(fields=['slug'], name='tratamiento_slug_3d6c06_idx'),
        ),
        migrations.AddIndex(
            model_name='categoriatratamiento',
            index=models.Index(fields=['tree_id', 'lft'], name='tratamiento_tree_id_lft_idx'),
        ),
        migrations.AddIndex(
            model_name='tratamiento',
            index=models.Index(fields=['popular'], name='tratamiento_popular_idx'),
        ),
        migrations.AddIndex(
            model_name='tratamiento',
            index=models.Index(fields=['precio_base'], name='tratamiento_precio_idx'),
        ),
    ]
