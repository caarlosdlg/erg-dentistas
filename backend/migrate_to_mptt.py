#!/usr/bin/env python
"""
Script para migrar las categor√≠as existentes a estructura MPTT
"""
import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dental_erp.settings')
django.setup()

from django.db import transaction
from tratamientos.models import CategoriaTratamiento
from django.utils import timezone
import uuid

def migrate_to_mptt():
    """Migrar categor√≠as existentes a estructura MPTT"""
    
    print("Iniciando migraci√≥n a MPTT...")
    
    with transaction.atomic():
        # Obtener todas las categor√≠as existentes
        categorias = CategoriaTratamiento.objects.all()
        
        print(f"Encontradas {categorias.count()} categor√≠as")
        
        if categorias.count() == 0:
            print("No hay categor√≠as existentes. Creando algunas de ejemplo...")
            create_sample_categories()
        else:
            print("Actualizando categor√≠as existentes...")
            update_existing_categories()
        
        print("‚úÖ Migraci√≥n completada exitosamente")

def create_sample_categories():
    """Crear categor√≠as de ejemplo"""
    
    # Categor√≠as principales
    preventivos = CategoriaTratamiento.objects.create(
        nombre="Servicios Preventivos",
        descripcion="Tratamientos para prevenir problemas dentales",
        color="#10B981",
        icono="ü¶∑",
        activo=True,
        orden=1
    )
    
    restaurativos = CategoriaTratamiento.objects.create(
        nombre="Servicios Restaurativos", 
        descripcion="Tratamientos para restaurar dientes da√±ados",
        color="#3B82F6",
        icono="üîß",
        activo=True,
        orden=2
    )
    
    quirurgicos = CategoriaTratamiento.objects.create(
        nombre="Servicios Quir√∫rgicos",
        descripcion="Procedimientos quir√∫rgicos dentales",
        color="#EF4444",
        icono="‚öïÔ∏è",
        activo=True,
        orden=3
    )
    
    esteticos = CategoriaTratamiento.objects.create(
        nombre="Servicios Est√©ticos",
        descripcion="Tratamientos para mejorar la apariencia dental",
        color="#8B5CF6",
        icono="‚ú®",
        activo=True,
        orden=4
    )
    
    # Subcategor√≠as para Preventivos
    CategoriaTratamiento.objects.create(
        nombre="Limpieza Dental",
        descripcion="Servicios de limpieza e higiene dental",
        color="#10B981",
        icono="ü™•",
        parent=preventivos,
        activo=True,
        orden=1
    )
    
    CategoriaTratamiento.objects.create(
        nombre="Fluorizaci√≥n",
        descripcion="Aplicaci√≥n de fl√∫or para fortalecer dientes",
        color="#10B981",
        icono="üíß",
        parent=preventivos,
        activo=True,
        orden=2
    )
    
    # Subcategor√≠as para Restaurativos
    resinas = CategoriaTratamiento.objects.create(
        nombre="Resinas y Amalgamas",
        descripcion="Empastes y obturaciones dentales",
        color="#3B82F6",
        icono="üî©",
        parent=restaurativos,
        activo=True,
        orden=1
    )
    
    coronas = CategoriaTratamiento.objects.create(
        nombre="Coronas y Puentes",
        descripcion="Pr√≥tesis fijas dentales",
        color="#3B82F6",
        icono="üëë",
        parent=restaurativos,
        activo=True,
        orden=2
    )
    
    # Sub-subcategor√≠as para Resinas
    CategoriaTratamiento.objects.create(
        nombre="Resinas Est√©ticas",
        descripcion="Resinas del color del diente",
        color="#3B82F6",
        icono="üé®",
        parent=resinas,
        activo=True,
        orden=1
    )
    
    CategoriaTratamiento.objects.create(
        nombre="Amalgamas de Plata",
        descripcion="Empastes de amalgama tradicional",
        color="#3B82F6",
        icono="‚ö™",
        parent=resinas,
        activo=True,
        orden=2
    )
    
    print("Categor√≠as de ejemplo creadas con estructura jer√°rquica")

def update_existing_categories():
    """Actualizar categor√≠as existentes con campos faltantes"""
    
    for categoria in CategoriaTratamiento.objects.all():
        updated = False
        
        if not categoria.color:
            categoria.color = "#6B7280"  # Color gris por defecto
            updated = True
            
        if not categoria.descripcion:
            categoria.descripcion = f"Descripci√≥n para {categoria.nombre}"
            updated = True
            
        if not categoria.icono:
            categoria.icono = "ü¶∑"
            updated = True
            
        if updated:
            categoria.save()
            print(f"Actualizada categor√≠a: {categoria.nombre}")

if __name__ == "__main__":
    migrate_to_mptt()
